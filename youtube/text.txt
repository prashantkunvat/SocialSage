.quality-selector {
	margin-top: 20px;
	display: none; /* Hide initially */
	justify-content: center;
	align-items: center;
	border: 2px solid;
	width: fit-content;
	position: relative;
	bottom: 77px;
	left: 302px;
}

.quality-selector select {
	padding: 10px;
	font-size: 1rem;
	/* margin-right: 10px; */
	width: 9rem;
	height: 3rem;
}

#download-button {
	padding: 10px;
	border: none;
	background-color: #ff4d4d;
	color: white;
	font-size: 1rem;
	border-radius: 0;
	cursor: pointer;
	margin-left: 0;
	height: 3rem;
	width: 10rem;
}


const url =
	"https://social-download-all-in-one.p.rapidapi.com/v1/social/autolink";
const options = {
	method: "POST",
	headers: {
		"content-type": "application/json",
		"X-RapidAPI-Key": "36b217c547mshbf89160bf76fbcep14cc50jsn45e464e420d5",
		"X-RapidAPI-Host": "social-download-all-in-one.p.rapidapi.com",
	},
	body: JSON.stringify({
		url: "",
	}),
};

const url =
	"https://social-download-all-in-one.p.rapidapi.com/v1/social/autolink";
const options = {
	method: "POST",
	headers: {
		"content-type": "application/json",
		"X-RapidAPI-Key": "36b217c547mshbf89160bf76fbcep14cc50jsn45e464e420d5",
		"X-RapidAPI-Host": "social-download-all-in-one.p.rapidapi.com",
	},
	body: JSON.stringify({
		url: "",
	}),
};

const input = document.querySelector("#video-link");
const fetchButton = document.querySelector("#fetch-button");
const downloadButton = document.querySelector("#download-button");
const thumbImg = document.querySelector("#thumbnail");
const title = document.querySelector("#title");
const duration = document.querySelector("#duration");
const downloadLink = document.querySelector("#download-links");
const author = document.querySelector("#author");
const qualitySelect = document.querySelector("#quality-select");
const qualitySelector = document.querySelector("#quality-selector");
const loadingAnimation = document.querySelector("#loading-animation");
let result = null; // Variable to store the API result

function secondsToMinutesAndSeconds(seconds) {
	var minutes = Math.floor(seconds / 60);
	var remainingSeconds = seconds % 60;
	return minutes + ":" + remainingSeconds;
}

async function fetchVideoData() {
	try {
		const newUrl = input.value;
		const bodyData = JSON.parse(options.body);
		bodyData.url = newUrl;
		options.body = JSON.stringify(bodyData);

		// Show loading animation and hide thumbnail
		loadingAnimation.style.display = "block";
		thumbImg.style.display = "none";

		const response = await fetch(url, options);
		result = await response.json(); // Store the result

		// Log the full response to understand its structure
		console.log("Full response:", result);

		if (!result || !result.medias) {
			throw new Error("Invalid response structure");
		}

		// Clear previous content
		title.innerHTML = "";
		duration.innerHTML = "";
		author.innerHTML = "";
		downloadLink.innerHTML = "";
		qualitySelect.innerHTML = '<option value="">Select Quality</option>';

		thumbImg.src = result.thumbnail;
		title.innerHTML = result.title;
		duration.innerHTML = secondsToMinutesAndSeconds(result.duration);
		author.innerHTML = result.author;

		result.medias.forEach((media, index) => {
			const option = document.createElement("option");
			option.value = index;
			option.textContent = media.quality;
			qualitySelect.appendChild(option);
		});

		qualitySelector.style.display = "flex"; // Show the quality selector

		// Hide loading animation and show thumbnail
		loadingAnimation.style.display = "none";
		thumbImg.style.display = "block";
	} catch (error) {
		console.error(error);
		alert("Failed to fetch video data. Please check the URL and try again.");

		// Hide loading animation
		loadingAnimation.style.display = "none";
	}
}

function downloadVideo() {
	const selectedIndex = qualitySelect.value;
	if (selectedIndex === "") {
		alert("Please select a quality");
		return;
	}

	const selectedMedia = result.medias[selectedIndex];
	window.location.href = selectedMedia.url;
}

fetchButton.addEventListener("click", fetchVideoData);
downloadButton.addEventListener("click", downloadVideo);


function getYouTubeVideoId(url) {
	const regex =
		/(?:youtube\.com\/(?:[^\/\n\s]+\/(?:\S+\/|\S*?v=)|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/|youtube.com\/shorts\/)([a-zA-Z0-9_-]{11})/;
	const match = url.match(regex);
	return match ? match[1] : null;
}

async function fetchVideoData(videoId) {
	const url = `https://yt-api.p.rapidapi.com/dl?id=${videoId}`;
	const options = {
		method: "GET",
		headers: {
			"X-RapidAPI-Key": "36b217c547mshbf89160bf76fbcep14cc50jsn45e464e420d5",
			"X-RapidAPI-Host": "yt-api.p.rapidapi.com",
		},
	};

	try {
		const response = await fetch(url, options);
		const result = await response.json();
		populateQualitySelector(result.formats, result.adaptiveFormats);
		console.log(result);
	} catch (error) {
		console.error(error);
	}
}

function populateQualitySelector(formats, adaptiveFormats) {
	const qualitySelect = document.getElementById("quality-select");
	qualitySelect.innerHTML = '<option value="">Select Quality</option>';

	const addOption = (format) => {
		const option = document.createElement("option");
		option.value = format.url;

		const qualityLabel =
			format.qualityLabel || format.quality || "Unknown Quality";
		const fps = format.fps ? `${format.fps}fps` : "";
		const mimeType = format.mimeType.startsWith("video") ? "Video" : "Audio";

		option.text = `${qualityLabel} ${fps} (${mimeType})`;
		qualitySelect.appendChild(option);
	};

	formats.forEach(addOption);
	adaptiveFormats.forEach(addOption);

	document.getElementById("quality-selector").style.display = "block";
}

document.getElementById("fetch-button").addEventListener("click", () => {
	const videoLink = document.getElementById("video-link").value;
	const videoId = getYouTubeVideoId(videoLink);
	if (videoId) {
		fetchVideoData(videoId);
	} else {
		console.error("Invalid YouTube URL");
	}
});

document.getElementById("download-button").addEventListener("click", () => {
	const qualitySelect = document.getElementById("quality-select");
	const selectedUrl = qualitySelect.value;
	if (selectedUrl) {
		window.location.href = selectedUrl;
	} else {
		console.error("No quality selected");
	}
});



///////


// const thumbnailElement = document.getElementById("thumbnail");
		// const titleElement = document.getElementById("title");
		// const durationElement = document.getElementById("duration");

		// // Extract and display the best thumbnail
		// const thumbnails = data.thumbnail;
		// const bestThumbnail = thumbnails[thumbnails.length - 1].url;
		// thumbnailElement.src = bestThumbnail;
		// thumbnailElement.style.display = "block";

		// // Extract and display the title
		// const title = data.title;
		// titleElement.textContent = `Title: ${title}`;

		// // Extract and display the duration
		// const lengthSeconds = parseInt(data.lengthSeconds);

		// if (lengthSeconds < 60) {
		// 	durationElement.textContent = `Duration: ${lengthSeconds} seconds`;
		// } else {
		// 	const hours = Math.floor(lengthSeconds / 3600);
		// 	const minutes = Math.floor((lengthSeconds % 3600) / 60);
		// 	const seconds = lengthSeconds % 60;

		// 	const durationString =
		// 		hours > 0
		// 			? `${hours}:${minutes.toString().padStart(2, "0")}:${seconds
		// 					.toString()
		// 					.padStart(2, "0")}`
		// 			: `${minutes}:${seconds.toString().padStart(2, "0")}`;
		// 	durationElement.textContent = `Duration: ${durationString}`;
		// }




		///////////////////////////////////


		<div class="input-container">
			<input
				type="text"
				placeholder="Paste your video link here"
				id="video-link"
			/>
			<img class="search-img" src="img/search.svg" alt="" />
			<button id="fetch-button">Fetch</button>
		</div>
		<button class="fill" id="download-button" style="display: none">
			<a id="download-link" href="">Download</a>
		</button>




		//////////////////////////////////////////
		<input type="text" id="urlInput" placeholder="Enter Instagram URL" />
		<button onclick="fetchVideo()">Fetch Video</button>
		<div id="videoContainer"></div>
		<button id="downloadBtn" style="display: none" onclick="downloadVideo()">
			Download Video
		</button>